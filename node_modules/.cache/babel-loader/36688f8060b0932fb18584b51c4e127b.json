{"ast":null,"code":"import _regeneratorRuntime from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/siddharthjain/Desktop/weather-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/siddharthjain/Desktop/weather-app/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Weather from './components/weather';\nimport Form from './components/form';\nimport Title from './components/title';\nimport Chart from './components/charts'; //imported the required files\n//API key for access to apixu API\n\nvar key = \"6e836498dfea418a933114544192003\"; //main APP component\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      error: undefined,\n      desc: undefined,\n      desc2: undefined,\n      forecast_date: [],\n      forecast_temp: [],\n      forecast_humidity: [],\n      chartDataTemperature: {},\n      chartDataHumidity: {} //the function which will be called after clicking on get weather button by the end user\n\n    };\n\n    _this.getWeather =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var city, country, forecast_api_call, forecast_response, forecast_date, forecast_temp, forecast_humidity, counter, days, temp, humidity, date_record, date, last, day, month, year, back_date, new_api, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //getting the city and country values from the end user\n                city = e.target.elements.city.value;\n                country = e.target.elements.country.value; //prevent refreshing of page\n\n                e.preventDefault(); // const api_call = await fetch(`https://api.apixu.com/v1/current.json?key=${key}&q=${city}`);\n                // const response = await api_call.json();\n                // console.log(response);\n                //API call to get the current and 3 days forecast weather report\n\n                _context.next = 5;\n                return fetch(\"https://api.apixu.com/v1/forecast.json?key=\".concat(key, \"&q=\").concat(city, \"&days=4\"));\n\n              case 5:\n                forecast_api_call = _context.sent;\n                _context.next = 8;\n                return forecast_api_call.json();\n\n              case 8:\n                forecast_response = _context.sent;\n                //storing the forecast record in an array\n                forecast_date = [];\n                forecast_temp = [];\n                forecast_humidity = [];\n                counter = 1;\n\n                while (counter <= 3) {\n                  forecast_date.push(forecast_response.forecast.forecastday[counter].date);\n                  forecast_temp.push(forecast_response.forecast.forecastday[counter].day.avgtemp_c);\n                  forecast_humidity.push(forecast_response.forecast.forecastday[counter].day.avghumidity);\n                  counter++;\n                } // console.log(forecast_date);\n                //getting the past 7 days data and storing in an array to plot the graph\n\n\n                days = 7;\n                temp = [];\n                humidity = [];\n                date_record = [];\n\n              case 18:\n                if (!(days > 1)) {\n                  _context.next = 38;\n                  break;\n                }\n\n                //iterating through past 7 days\n                date = new Date();\n                last = new Date(date.getTime() - days * 24 * 60 * 60 * 1000);\n                day = last.getDate();\n                month = last.getMonth() + 1;\n                year = last.getFullYear();\n                back_date = year + '-' + month + '-' + day; //storing the past 7 dates\n\n                date_record.push(back_date); //API call to access historical data. The data is fetched for each day in the while loop\n\n                _context.next = 28;\n                return fetch(\"https://api.apixu.com/v1/history.json?key=\".concat(key, \"&q=\").concat(city, \"&dt=\").concat(back_date));\n\n              case 28:\n                new_api = _context.sent;\n                _context.next = 31;\n                return new_api.json();\n\n              case 31:\n                result = _context.sent;\n                console.log(result); //storing the temperature and humidity record\n\n                temp.push(result.forecast.forecastday[0].day.avgtemp_c);\n                humidity.push(result.forecast.forecastday[0].day.avghumidity);\n                days--;\n                _context.next = 18;\n                break;\n\n              case 38:\n                // console.log(temp);\n                //checking whether user has entered the city and country value or not\n                if (city && country) {\n                  //setting each state variables\n                  _this.setState({\n                    temperature: forecast_response.current.temp_c,\n                    city: forecast_response.location.name,\n                    country: forecast_response.location.country,\n                    humidity: forecast_response.current.humidity,\n                    error: \"\",\n                    desc: \"Today's weather report\",\n                    desc2: \"Weather Forecast for next 3 days\",\n                    forecast_date: forecast_date,\n                    forecast_temp: forecast_temp,\n                    forecast_humidity: forecast_humidity,\n                    //passing the data to make temperature chart for past 7 days\n                    chartDataTemperature: {\n                      labels: date_record,\n                      datasets: [{\n                        label: 'Temperature (in celsius)',\n                        data: temp,\n                        backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 99, 132, 0.6)']\n                      }]\n                    },\n                    //passing the data to make past 7days humidity chart\n                    chartDataHumidity: {\n                      labels: date_record,\n                      datasets: [{\n                        label: 'Humidity',\n                        data: humidity,\n                        backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)', 'rgba(255, 159, 64, 0.6)', 'rgba(255, 99, 132, 0.6)']\n                      }]\n                    }\n                  });\n                } else {\n                  _this.setState({\n                    error: \"Please input search values...\"\n                  });\n                }\n\n              case 39:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    //sending data to each functional components\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(Form, {\n        loadWeather: this.getWeather,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(Weather, {\n        desc: this.state.desc,\n        temperature: this.state.temperature,\n        city: this.state.city,\n        country: this.state.country,\n        humidity: this.state.humidity,\n        error: this.state.error,\n        desc2: this.state.desc2,\n        forecast_date: this.state.forecast_date,\n        forecast_temp: this.state.forecast_temp,\n        forecast_humidity: this.state.forecast_humidity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }), React.createElement(Chart, {\n        chartDataTemperature: this.state.chartDataTemperature,\n        chartDataHumidity: this.state.chartDataHumidity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component); //exporting the APP module\n\n\nexport default App;","map":{"version":3,"sources":["/Users/siddharthjain/Desktop/weather-app/src/App.js"],"names":["React","Component","Weather","Form","Title","Chart","key","App","state","temperature","undefined","city","country","humidity","error","desc","desc2","forecast_date","forecast_temp","forecast_humidity","chartDataTemperature","chartDataHumidity","getWeather","e","target","elements","value","preventDefault","fetch","forecast_api_call","json","forecast_response","counter","push","forecast","forecastday","date","day","avgtemp_c","avghumidity","days","temp","date_record","Date","last","getTime","getDate","month","getMonth","year","getFullYear","back_date","new_api","result","console","log","setState","current","temp_c","location","name","labels","datasets","label","data","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Weather from './components/weather';\nimport Form from './components/form';\nimport Title from './components/title';\nimport Chart from './components/charts';\n\n//imported the required files\n\n//API key for access to apixu API\nconst key=\"6e836498dfea418a933114544192003\";\n\n//main APP component\nclass App extends React.Component {\n\n    //defining the state variables\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        error: undefined,\n        desc:undefined,\n        desc2:undefined,\n        forecast_date:[],\n        forecast_temp:[],\n        forecast_humidity:[],\n        chartDataTemperature:{},\n        chartDataHumidity:{}\n    }\n\n    //the function which will be called after clicking on get weather button by the end user\n  getWeather= async(e)=>{\n\n      //getting the city and country values from the end user\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    //prevent refreshing of page\n    e.preventDefault();\n\n      // const api_call = await fetch(`https://api.apixu.com/v1/current.json?key=${key}&q=${city}`);\n      // const response = await api_call.json();\n      // console.log(response);\n\n      //API call to get the current and 3 days forecast weather report\n      const forecast_api_call= await fetch(`https://api.apixu.com/v1/forecast.json?key=${key}&q=${city}&days=4`);\n      const forecast_response=await forecast_api_call.json();\n\n      //storing the forecast record in an array\n      let forecast_date=[];\n      let forecast_temp=[];\n      let forecast_humidity=[];\n      let counter=1;\n      while(counter<=3){\n          forecast_date.push(forecast_response.forecast.forecastday[counter].date);\n          forecast_temp.push(forecast_response.forecast.forecastday[counter].day.avgtemp_c);\n          forecast_humidity.push(forecast_response.forecast.forecastday[counter].day.avghumidity);\n          counter++;\n      }\n      // console.log(forecast_date);\n\n\n      //getting the past 7 days data and storing in an array to plot the graph\n      let days=7;\n      let temp=[];\n      let humidity=[];\n      let date_record=[];\n      while(days>1){\n\n          //iterating through past 7 days\n          let date = new Date();\n          let last = new Date(date.getTime() - (days * 24 * 60 * 60 * 1000));\n          let day =last.getDate();\n          let month=last.getMonth()+1;\n          let year=last.getFullYear();\n          let back_date=year+'-'+month+'-'+day;\n\n          //storing the past 7 dates\n          date_record.push(back_date);\n\n          //API call to access historical data. The data is fetched for each day in the while loop\n          let new_api=await fetch(`https://api.apixu.com/v1/history.json?key=${key}&q=${city}&dt=${back_date}`);\n          let result=await new_api.json();\n\n\n          console.log(result);\n          //storing the temperature and humidity record\n          temp.push(result.forecast.forecastday[0].day.avgtemp_c);\n          humidity.push(result.forecast.forecastday[0].day.avghumidity);\n          days--;\n      }\n\n      // console.log(temp);\n\n      //checking whether user has entered the city and country value or not\n      if(city && country){\n\n          //setting each state variables\n          this.setState({\n              temperature: forecast_response.current.temp_c,\n              city: forecast_response.location.name,\n              country: forecast_response.location.country,\n              humidity: forecast_response.current.humidity,\n              error: \"\",\n              desc:\"Today's weather report\",\n              desc2:\"Weather Forecast for next 3 days\",\n              forecast_date:forecast_date,\n              forecast_temp:forecast_temp,\n              forecast_humidity:forecast_humidity,\n\n              //passing the data to make temperature chart for past 7 days\n              chartDataTemperature:{\n                  labels:date_record,\n                  datasets:[\n                      {\n                          label:'Temperature (in celsius)',\n                          data:temp,\n                          backgroundColor:[\n                              'rgba(255, 99, 132, 0.6)',\n                              'rgba(54, 162, 235, 0.6)',\n                              'rgba(255, 206, 86, 0.6)',\n                              'rgba(75, 192, 192, 0.6)',\n                              'rgba(153, 102, 255, 0.6)',\n                              'rgba(255, 159, 64, 0.6)',\n                              'rgba(255, 99, 132, 0.6)'\n                          ]\n                      }\n                  ]\n              },\n              //passing the data to make past 7days humidity chart\n              chartDataHumidity:{\n                  labels:date_record,\n                  datasets:[\n                      {\n                          label:'Humidity',\n                          data:humidity,\n                          backgroundColor:[\n                              'rgba(255, 99, 132, 0.6)',\n                              'rgba(54, 162, 235, 0.6)',\n                              'rgba(255, 206, 86, 0.6)',\n                              'rgba(75, 192, 192, 0.6)',\n                              'rgba(153, 102, 255, 0.6)',\n                              'rgba(255, 159, 64, 0.6)',\n                              'rgba(255, 99, 132, 0.6)'\n                          ]\n                      }\n                  ]\n              }\n          })\n      }else{\n          this.setState({\n              error: \"Please input search values...\"\n          })\n      }\n  }\n\n\n//sending data to each functional components\n  render() {\n    return (\n      <div>\n        <Title />\n        <Form loadWeather={this.getWeather}/>\n        <Weather\n            desc={this.state.desc}\n            temperature={this.state.temperature}\n            city={this.state.city}\n            country={this.state.country}\n            humidity={this.state.humidity}\n            error={this.state.error}\n            desc2={this.state.desc2}\n            forecast_date={this.state.forecast_date}\n            forecast_temp={this.state.forecast_temp}\n            forecast_humidity={this.state.forecast_humidity}/>\n\n          <Chart\n              chartDataTemperature={this.state.chartDataTemperature}\n              chartDataHumidity={this.state.chartDataHumidity}\n          />\n\n      </div>\n    );\n  }\n}\n\n//exporting the APP module\nexport default App;\n"]},"metadata":{},"sourceType":"module"}